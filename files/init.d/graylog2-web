#! /bin/sh
### BEGIN INIT INFO
# Provides:          graylog2-web
# Required-Start:    $network $named $remote_fs $syslog
# Required-Stop:     $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Graylog2 Web Interface
# Description:       Graylog2 Open Source syslog implementation that stores
#                    your logs in ElasticSearch
### END INIT INFO

# Author: Jonas Genannt <jonas.genannt@capi2name.de>

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="Graylog2 Web Interface"
NAME=graylog2-web
GRAYLOG2_WEB_HOME=/opt/graylog2/web
JAR_DIRECTORY="${GRAYLOG2_WEB_HOME}/lib"
DAEMON=/usr/bin/java
PIDFILE=/var/run/graylog2-web/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
JAVA_MIN_MEM=128m
JAVA_MAX_MEM=1024m
JAVA_MAX_PERM_SIZE=256m
HTTP_ADDRESS="0.0.0.0"
HTTP_PORT="9000"
RUN=yes

# Exit if the package is not installed
[ -d "$JAR_DIRECTORY" ] || exit 0
[ -x "$DAEMON" ] || exit 0

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /lib/init/vars.sh

. /lib/lsb/init-functions

JAVA_CLASS_PATH=""
for jar in $(ls $JAR_DIRECTORY); do
  JAVA_CLASS_PATH="${JAVA_CLASS_PATH}:${JAR_DIRECTORY}/${jar}"
done

DAEMON_ARGS="-Xms${JAVA_MIN_MEM} -Xmx${JAVA_MAX_MEM} -Dhttp.port='${HTTP_PORT}' -Dhttp.address='${HTTP_ADDRESS}' -Dlogger.file=/opt/graylog2/web/graylog2-web-logger.xml -XX:MaxPermSize=${JAVA_MAX_PERM_SIZE} -Duser.dir=${GRAYLOG2_WEB_HOME}  -Dpidfile.path=$PIDFILE -cp \"$JAVA_CLASS_PATH\" play.core.server.NettyServer"


running()
{
  [ ! -f "$PIDFILE" ] && return 1
  status="0"
  pidofproc -p $PIDFILE "play.core.server.NettyServer" >/dev/null || status="$?"
  if [ "$status" = 0 ]; then
    return 0
  fi

  return 1
}


do_start()
{
  if [ "$RUN" != "yes" ] ; then
    log_progress_msg "(disabled)"
    log_end_msg 0

    exit 0
  fi
  test -e /var/run/graylog2-web || mkdir /var/run/graylog2-web ; chown _graylog2:_graylog2 /var/run/graylog2-web
  if running ; then
    log_progress_msg "apparently already running"
    return 1
  else
    su -s /bin/bash -c "nohup $DAEMON $DAEMON_ARGS >> /var/log/graylog2-web/console.log 2>&1 &" _graylog2
  fi
}

do_stop()
{
  if [ -s $PIDFILE ]; then
    kill `cat ${PIDFILE}` >/dev/null 2>&1
  fi
  rm -f $PIDFILE
  return "0"
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
       status_of_proc -p "${PIDFILE}" "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
    # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

: